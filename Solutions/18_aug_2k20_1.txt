/*
Algorithm:
for each roman number
    if curr num is strictly less than the next num 
        then substract the num 
    Else 
        add the num
*/
class Solution {
public:
    int get_dec_equivalent(char ch) {
        if(ch == 'I') return 1;
        else if(ch == 'V') return 5;
        else if(ch == 'X') return 10;
        else if(ch == 'L') return 50;
        else if(ch == 'C') return 100;
        else if(ch == 'D') return 500;
        else if(ch == 'M') return 1000;
        return -1;
    }
    int romanToInt(string s) {
        // this logic does not check the validity of the input roman string
        // correct roman number is expected as input
        int dec_num = 0;
        for(int i = 0; i < s.size(); i++) {
            char ch = s[i];
            // add the last number
            if(i == s.size()-1) dec_num += get_dec_equivalent(ch);
            else {

                if(get_dec_equivalent(s[i]) < get_dec_equivalent(s[i+1])) {
                    dec_num -= get_dec_equivalent(s[i]);
                }
                else {
                    dec_num += get_dec_equivalent(s[i]); 
                }
                    
            }
        }
        return dec_num;
    }
};
